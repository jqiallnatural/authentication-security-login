{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isEmptyString.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/isSameError.ts","../src/utils/compareObject.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/getFieldArrayValueByName.ts","../src/logic/getIsFieldsDifferent.ts","../src/logic/isNameInFieldArray.ts","../src/utils/isSelectInput.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/logic/mapIds.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/useFieldArray.ts","../src/useForm.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/logic/attachEventListeners.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","export default (value: string) => value === '';\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport isEmptyString from '../utils/isEmptyString';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || isEmptyString(value)\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  name: InternalFieldName<TFieldValues>,\n) {\n  if (fields[name]) {\n    const field = fields[name]!;\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return field ? getRadioValue(field.options).value : '';\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return field ? getCheckboxValue(field.options).value : false;\n    }\n\n    return value;\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\n\nfunction baseGet(object: any, path: any) {\n  return [...Array(path.length)].reduce(\n    (result, _, i) => result[path[i]] || result,\n    object,\n  );\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath.slice(0, -1));\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fields: FieldRefs<TFieldValues>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fields[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fields, name);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fields) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fields,\n        name,\n      );\n    }\n  }\n\n  return output;\n};\n","import isObject from './isObject';\nimport compareObject from './compareObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  compareObject(error.types, types);\n","export default (objectA: any = {}, objectB: any = {}) => {\n  const objectAKeys = Object.keys(objectA);\n\n  return (\n    objectAKeys.length === Object.keys(objectB).length &&\n    objectAKeys.every((key) => objectB[key] && objectB[key] === objectA[key])\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isEmptyString from '../utils/isEmptyString';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox ? (fields[name] as Field).options?.[0].ref : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fields, name);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport { FieldValues, InternalFieldName } from '../types/form';\nimport isArray from './isArray';\n\nconst getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values)\n    ? values.map((value, key) => getInnerPath(value, key))\n    : Object.entries(values).map(([key, value]) =>\n        getInnerPath(value, key, true),\n      );\n};\n\nexport default <TFieldValues extends FieldValues = FieldValues>(\n  parentPath: InternalFieldName<TFieldValues>,\n  value: TFieldValues,\n) => getPath(parentPath, value).flat(Infinity);\n","import transformToNestObject from './transformToNestObject';\nimport get from '../utils/get';\nimport getPath from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath<TFieldValues>(fieldName, value).forEach((name: string) =>\n        watchFields.add(name),\n      );\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnChange,\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted,\n}: {\n  hasError: boolean;\n  isOnChange: boolean;\n  isBlurEvent?: boolean;\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isReValidateOnSubmit: boolean;\n  isReValidateOnBlur: boolean;\n  isSubmitted: boolean;\n}) =>\n  (isOnChange && isBlurEvent) ||\n  (isOnSubmit && isReValidateOnSubmit) ||\n  (isOnSubmit && !isSubmitted) ||\n  (isOnBlur && !isBlurEvent && !hasError) ||\n  (isReValidateOnBlur && !isBlurEvent && hasError) ||\n  (isReValidateOnSubmit && isSubmitted);\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import transformToNestObject from './transformToNestObject';\nimport getFieldsValues from './getFieldsValues';\nimport get from '../utils/get';\nimport { FieldValues, FieldRefs, InternalFieldName } from '../types/form';\n\nexport default <TFieldValues extends FieldValues = FieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  name?: InternalFieldName<FieldValues>,\n) => {\n  const results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n","import isUndefined from '../utils/isUndefined';\nimport isArray from '../utils/isArray';\n\nexport default function getIsFieldsDifferent(\n  referenceArray: unknown[],\n  differenceArray: unknown[],\n) {\n  if (\n    !isArray<any>(referenceArray) ||\n    !isArray<any>(differenceArray) ||\n    referenceArray.length !== differenceArray.length\n  ) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (\n      isUndefined(dataB) ||\n      Object.keys(dataA).length !== Object.keys(dataB).length\n    ) {\n      return true;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nexport const FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isArray from '../utils/isArray';\nimport isObject from '../utils/isObject';\nimport generateId from './generateId';\nimport { ArrayField } from '../types/form';\n\nexport const appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nexport const mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): T[] =>\n  isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | null)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(data: T[], value?: T | T[]): (T | null)[] {\n  return [...(isArray(value) ? value : [value || null]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | null)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | null)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || null]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): null[] | null =>\n  isArray(value) ? Array(value.length).fill(null) : null;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport isBoolean from './utils/isBoolean';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    errorsRef,\n    trigger,\n    mode: { isOnSubmit, isOnBlur, isOnChange },\n    reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n    formState,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(unmountFieldsStateRef.current[name]) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const isCheckboxInput = isBoolean(value);\n  const onFocusRef = React.useRef(onFocus);\n  const isSubmitted = isSubmittedRef.current;\n\n  const shouldValidate = () =>\n    !skipValidation({\n      hasError: !!get(errorsRef.current, name),\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n      isReValidateOnBlur,\n      isReValidateOnSubmit,\n      isSubmitted,\n    });\n\n  const commonTask = (event: any[]) => {\n    const data = getInputValue(event[0], isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (isOnBlur || (formState.isSubmitted && isReValidateOnBlur)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    ...{ [isCheckboxInput ? 'checked' : VALUE]: value },\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any, isCheckboxInput: boolean) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isCheckboxInput || isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport getFieldValueByName from './logic/getFieldArrayValueByName';\nimport { appendId, mapIds } from './logic/mapIds';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport isKey from './utils/isKey';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid,\n    renderWatchedInputs,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...get(\n      fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\n        ? fieldArrayDefaultValues.current\n        : defaultValuesRef.current,\n      name,\n      [],\n    ),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setField] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const [isDeleted, setIsDeleted] = React.useState(false);\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const isNameKey = isKey(name);\n\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues,\n      });\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender: boolean) => {\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | null)[],\n  ) => {\n    if (readFormStateRef.current.isDirty) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        getIsFieldsDifferent(\n          flagOrFields,\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (readFormStateRef.current.dirtyFields) {\n      dirtyFieldsRef.current[name] = [\n        ...(dirtyFieldsRef.current[name] || fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ];\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    resetFields();\n    setFieldAndValidState(\n      prependAt(\n        allFields.current,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n\n    if (isArray(errorsRef.current[name])) {\n      errorsRef.current[name] = prependAt(errorsRef.current[name], emptyArray);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(\n        touchedFieldsRef.current[name],\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = prependAt(\n        dirtyFieldsRef.current[name],\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    resetFields(\n      removeArrayAt(getFieldValueByName(fieldsRef.current, name), index),\n    );\n    setFieldAndValidState(removeArrayAt(allFields.current, index));\n    setIsDeleted(true);\n\n    if (isArray(errorsRef.current[name])) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n      if (!unique(errorsRef.current[name]).length) {\n        delete errorsRef.current[name];\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(\n        touchedFieldsRef.current[name],\n        index,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = removeArrayAt(\n        dirtyFieldsRef.current[name],\n        index,\n      );\n\n      if (!dirtyFieldsRef.current[name].length) {\n        delete dirtyFieldsRef.current[name];\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n\n    resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(\n      insertAt(\n        allFields.current,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n\n    if (isArray(errorsRef.current[name])) {\n      errorsRef.current[name] = insertAt(\n        errorsRef.current[name],\n        index,\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(\n        touchedFieldsRef.current[name],\n        index,\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = insertAt(\n        dirtyFieldsRef.current[name],\n        index,\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(allFields.current, indexA, indexB);\n    setFieldAndValidState([...allFields.current]);\n\n    if (isArray(errorsRef.current[name])) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      swapArrayAt(dirtyFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(allFields.current, from, to);\n    setFieldAndValidState([...allFields.current]);\n\n    if (isArray(errorsRef.current[name])) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      moveArrayAt(dirtyFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (\n      isNameKey &&\n      isDeleted &&\n      fieldArrayDefaultValues.current[name] &&\n      fields.length < fieldArrayDefaultValues.current[name].length\n    ) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n\n    if (isWatchAllRef && isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          break;\n        }\n      }\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    isDeleted,\n    isNameKey,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport getFieldArrayValueByName from './logic/getFieldArrayValueByName';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const { isOnBlur, isOnSubmit, isOnChange, isOnAll } = React.useRef(\n    modeChecker(mode),\n  ).current;\n  const validateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const isWindowUndefined = typeof window === UNDEFINED;\n  const isWeb =\n    typeof document !== UNDEFINED &&\n    !isWindowUndefined &&\n    !isUndefined(window.HTMLElement);\n  const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnSubmit: isReValidateOnSubmit,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [reRender, resolverRef],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref)) {\n        if (isString(value)) {\n          ref.value = value;\n        } else {\n          ref.files = value as FileList;\n        }\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = (value as string).includes(\n                  checkboxRef.value,\n                )),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [isWeb],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef.current, name);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          getIsFieldsDifferent(\n            getFieldArrayValueByName(\n              fieldsRef.current,\n              getFieldArrayParentName(name),\n            ),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          validateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, validateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldArrayValueByName(fieldsRef.current),\n        contextRef.current,\n        validateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        payload.forEach((name) => {\n          const error = get(errors, name);\n\n          if (error) {\n            set(errorsRef.current, name, error);\n          } else {\n            unset(errorsRef.current, name);\n          }\n        });\n        reRender();\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n      }\n\n      return isEmptyObject(errorsRef.current);\n    },\n    [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, resolverRef],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [\n      executeSchemaOrResolverValidation,\n      executeValidation,\n      reRender,\n      resolverRef,\n    ],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      config: SetValueConfig,\n      parentFieldName?: string,\n    ) => {\n      for (const key in value) {\n        const fieldName = `${parentFieldName || name}${\n          isArray(value) ? `[${key}]` : `.${key}`\n        }`;\n        const field = fieldsRef.current[fieldName];\n\n        if (isObject(value[key])) {\n          setInternalValues(name, value[key], config, fieldName);\n        }\n\n        if (field) {\n          setFieldValue(field, value[key]);\n\n          if (config.shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (config.shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      }\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          watchFieldsHookRef.current[key].has(name) ||\n          !watchFieldsHookRef.current[key].size ||\n          isNameInFieldArray(fieldArrayNamesRef.current, name)\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      !isPrimitive(value) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = target ? (target as Ref).name : '';\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (!field) {\n          return;\n        }\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const shouldSkipValidation =\n          !isOnAll &&\n          skipValidation({\n            hasError: !!get(errorsRef.current, name),\n            isOnChange,\n            isBlurEvent,\n            isOnSubmit,\n            isReValidateOnSubmit,\n            isOnBlur,\n            isReValidateOnBlur,\n            isSubmitted: isSubmittedRef.current,\n          });\n        let shouldRender = setDirty(name) || isFieldWatched(name);\n\n        if (\n          isBlurEvent &&\n          !get(touchedFieldsRef.current, name) &&\n          readFormStateRef.current.touched\n        ) {\n          set(touchedFieldsRef.current, name, true);\n          shouldRender = true;\n        }\n\n        if (shouldSkipValidation) {\n          renderWatchedInputs(name);\n          return shouldRender && reRender();\n        }\n\n        if (resolver) {\n          const { errors } = await resolver(\n            getFieldArrayValueByName(fieldsRef.current),\n            contextRef.current,\n            validateAllFieldCriteria,\n          );\n          const previousFormIsValid = isValidRef.current;\n          isValidRef.current = isEmptyObject(errors);\n\n          error = (get(errors, name)\n            ? { [name]: get(errors, name) }\n            : {}) as FlatFieldErrors<TFieldValues>;\n\n          if (previousFormIsValid !== isValidRef.current) {\n            shouldRender = true;\n          }\n        } else {\n          error = await validateField<TFieldValues>(\n            fieldsRef,\n            validateAllFieldCriteria,\n            field,\n          );\n        }\n\n        renderWatchedInputs(name);\n\n        if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n          reRender();\n        }\n      };\n\n  const validateResolver = React.useCallback(\n    (values: any = {}) => {\n      const fieldValues = isEmptyObject(defaultValuesRef.current)\n        ? getFieldsValues(fieldsRef.current)\n        : defaultValuesRef.current;\n\n      resolverRef.current!(\n        transformToNestObject({\n          ...fieldValues,\n          ...values,\n        }),\n        contextRef.current,\n        validateAllFieldCriteria,\n      ).then(({ errors }) => {\n        const previousFormIsValid = isValidRef.current;\n        isValidRef.current = isEmptyObject(errors);\n\n        if (previousFormIsValid !== isValidRef.current) {\n          reRender();\n        }\n      });\n    },\n    [reRender, validateAllFieldCriteria, resolverRef],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef.current,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n    },\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n          [\n            fieldsWithValidationRef,\n            validFieldsRef,\n            watchFieldsRef,\n          ].forEach((data) => data.current.delete(field.ref.name));\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched\n          ) {\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [reRender, validateResolver, removeFieldEventListener, resolverRef],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef.current,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldsRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      unmountFieldsStateRef.current[name],\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = isEmptyUnmountFields\n        ? get(defaultValuesRef.current, name)\n        : unmountFieldsStateRef.current[name];\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, field).then(\n          (error) => {\n            const previousFormIsValid = isValidRef.current;\n\n            isEmptyObject(error)\n              ? validFieldsRef.current.add(name)\n              : (isValidRef.current = false);\n\n            if (previousFormIsValid !== isValidRef.current) {\n              reRender();\n            }\n          },\n        );\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? getFieldValue(fields, name)\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners({\n        field:\n          isRadioOrCheckbox && field.options\n            ? field.options[field.options.length - 1]\n            : field,\n        isRadioOrCheckbox:\n          isRadioOrCheckbox || isSelectInput(ref as FieldElement),\n        handleChange: handleChangeRef.current,\n      });\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldsRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldsRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldsRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = {\n        ...unmountFieldsStateRef.current,\n        ...getFieldsValues(fieldsRef.current),\n      };\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            transformToNestObject(fieldValues),\n            contextRef.current,\n            validateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                validateAllFieldCriteria,\n                field,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(transformToNestObject(fieldValues), e);\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError && isWeb) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [isWeb, reRender, resolverRef, shouldFocusError, validateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    fieldsRef.current = {};\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    unmountFieldsStateRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  const getValue = <TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue => getFieldValue(fieldsRef.current, name);\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    const fields = fieldsRef.current;\n\n    if (isString(payload)) {\n      return getValue(payload);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getValue(name),\n        }),\n        {},\n      );\n    }\n\n    return transformToNestObject(getFieldsValues(fields));\n  }\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    mode: {\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref, MutationWatcher } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: VoidFunction,\n): MutationWatcher {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners({\n  field: { ref },\n  handleChange,\n  isRadioOrCheckbox,\n}: {\n  field: Field;\n  isRadioOrCheckbox: boolean;\n  handleChange?: EventListenerOrEventListenerObject;\n}): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\n  control?: Control;\n}): UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n  const nameRef = React.useRef(name);\n\n  const updateWatchValue = React.useCallback(\n    () =>\n      setValue(\n        watchInternal(nameRef.current, defaultValueRef.current, idRef.current),\n      ),\n    [setValue, watchInternal, defaultValueRef, nameRef, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(nameRef.current, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    nameRef,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","_a","_c","__read","val","undefined","filter","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","SELECT","defaultResult","validResult","values","map","attributes","isEmptyString","getFieldValue","fields","name","field","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","_","i","baseGet","slice","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isSameRef","fieldValue","search","output","name_1","isString","startsWith","find","error","types","message","objectA","objectB","objectAKeys","every","compareObject","RegExp","validationData","isRegex","isValidElement","getValidateError","isMessage","isBoolean","validateAllFieldCriteria","errors","fieldsRef","_b","required","maxLength","minLength","min","max","pattern","validate","current","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_p","validateError","validationResult","_j","__values","_l","validateFunction","validateResult","getPath","getInnerPath","pathWithIndex","isPrimitive","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","transformToNestObject","parentPath","flat","Infinity","forEach","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","substring","indexOf","results","getFieldsValues","getIsFieldsDifferent","referenceArray","differenceArray","dataA","dataB","isMatchFieldArrayName","searchName","names","some","mode","isOnAll","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","appendId","keyName","generateId","mapIds","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","filterBooleanArray","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","errorsRef","trigger","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","unmountFieldsStateRef","formState","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","isCheckboxInput","onFocusRef","shouldValidate","skipValidation","commonTask","event","target","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","touched","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","shouldRender","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateSchemaIsValid","renderWatchedInputs","getDefaultValues","getFieldArrayParentName","memoizedDefaultValues","setField","isDeleted","setIsDeleted","allFields","isNameKey","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","reset","pop","resetFunctions","fieldArrayNames","delete","swap","getFieldValueByName","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","currentFieldName","previousFieldName","has","insertAt","reValidateMode","resolver","context","defaultValues","shouldFocusError","shouldUnregister","criteriaMode","Set","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeChecker","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","submitCount","isSubmitting","_k","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","selected","includes","checkboxRef","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","getFieldArrayValueByName","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","Promise","all","setInternalValues","config","parentFieldName","setInternalValue","isFieldWatched","found","size","shouldSkipValidation","validateResolver","then","forceDelete","handleChange","mutationWatcher","fieldRef","options_1","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldsRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","isEmptyUnmountFields","addEventListener","attachEventListeners","isSelectInput","handleSubmit","callback","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","getValue","commonProps","getValues","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","nameRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}