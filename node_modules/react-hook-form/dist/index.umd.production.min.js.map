{"version":3,"file":"index.umd.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isEmptyString.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/isSameError.ts","../src/utils/compareObject.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/getFieldArrayValueByName.ts","../src/logic/getIsFieldsDifferent.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/logic/mapIds.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/useFieldArray.ts","../src/useForm.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/utils/isSelectInput.ts","../src/logic/attachEventListeners.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","export default (value: string) => value === '';\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport isEmptyString from '../utils/isEmptyString';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || isEmptyString(value)\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  name: InternalFieldName<TFieldValues>,\n) {\n  if (fields[name]) {\n    const field = fields[name]!;\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return field ? getRadioValue(field.options).value : '';\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return field ? getCheckboxValue(field.options).value : false;\n    }\n\n    return value;\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\n\nfunction baseGet(object: any, path: any) {\n  return [...Array(path.length)].reduce(\n    (result, _, i) => result[path[i]] || result,\n    object,\n  );\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath.slice(0, -1));\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fields: FieldRefs<TFieldValues>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fields[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fields, name);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fields) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fields,\n        name,\n      );\n    }\n  }\n\n  return output;\n};\n","import isObject from './isObject';\nimport compareObject from './compareObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  compareObject(error.types, types);\n","export default (objectA: any = {}, objectB: any = {}) => {\n  const objectAKeys = Object.keys(objectA);\n\n  return (\n    objectAKeys.length === Object.keys(objectB).length &&\n    objectAKeys.every((key) => objectB[key] && objectB[key] === objectA[key])\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isEmptyString from '../utils/isEmptyString';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox ? (fields[name] as Field).options?.[0].ref : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fields, name);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport { FieldValues, InternalFieldName } from '../types/form';\nimport isArray from './isArray';\n\nconst getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values)\n    ? values.map((value, key) => getInnerPath(value, key))\n    : Object.entries(values).map(([key, value]) =>\n        getInnerPath(value, key, true),\n      );\n};\n\nexport default <TFieldValues extends FieldValues = FieldValues>(\n  parentPath: InternalFieldName<TFieldValues>,\n  value: TFieldValues,\n) => getPath(parentPath, value).flat(Infinity);\n","import transformToNestObject from './transformToNestObject';\nimport get from '../utils/get';\nimport getPath from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath<TFieldValues>(fieldName, value).forEach((name: string) =>\n        watchFields.add(name),\n      );\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnChange,\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted,\n}: {\n  hasError: boolean;\n  isOnChange: boolean;\n  isBlurEvent?: boolean;\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isReValidateOnSubmit: boolean;\n  isReValidateOnBlur: boolean;\n  isSubmitted: boolean;\n}) =>\n  (isOnChange && isBlurEvent) ||\n  (isOnSubmit && isReValidateOnSubmit) ||\n  (isOnSubmit && !isSubmitted) ||\n  (isOnBlur && !isBlurEvent && !hasError) ||\n  (isReValidateOnBlur && !isBlurEvent && hasError) ||\n  (isReValidateOnSubmit && isSubmitted);\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import transformToNestObject from './transformToNestObject';\nimport getFieldsValues from './getFieldsValues';\nimport get from '../utils/get';\nimport { FieldValues, FieldRefs, InternalFieldName } from '../types/form';\n\nexport default <TFieldValues extends FieldValues = FieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  name?: InternalFieldName<FieldValues>,\n) => {\n  const results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n","import isUndefined from '../utils/isUndefined';\nimport isArray from '../utils/isArray';\n\nexport default function getIsFieldsDifferent(\n  referenceArray: unknown[],\n  differenceArray: unknown[],\n) {\n  if (\n    !isArray<any>(referenceArray) ||\n    !isArray<any>(differenceArray) ||\n    referenceArray.length !== differenceArray.length\n  ) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (\n      isUndefined(dataB) ||\n      Object.keys(dataA).length !== Object.keys(dataB).length\n    ) {\n      return true;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nexport const FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isArray from '../utils/isArray';\nimport isObject from '../utils/isObject';\nimport generateId from './generateId';\nimport { ArrayField } from '../types/form';\n\nexport const appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nexport const mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): T[] =>\n  isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | null)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(data: T[], value?: T | T[]): (T | null)[] {\n  return [...(isArray(value) ? value : [value || null]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | null)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | null)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || null]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): null[] | null =>\n  isArray(value) ? Array(value.length).fill(null) : null;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport isBoolean from './utils/isBoolean';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    errorsRef,\n    trigger,\n    mode: { isOnSubmit, isOnBlur, isOnChange },\n    reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n    formState,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(unmountFieldsStateRef.current[name]) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const isCheckboxInput = isBoolean(value);\n  const onFocusRef = React.useRef(onFocus);\n  const isSubmitted = isSubmittedRef.current;\n\n  const shouldValidate = () =>\n    !skipValidation({\n      hasError: !!get(errorsRef.current, name),\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n      isReValidateOnBlur,\n      isReValidateOnSubmit,\n      isSubmitted,\n    });\n\n  const commonTask = (event: any[]) => {\n    const data = getInputValue(event[0], isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (isOnBlur || (formState.isSubmitted && isReValidateOnBlur)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    ...{ [isCheckboxInput ? 'checked' : VALUE]: value },\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any, isCheckboxInput: boolean) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isCheckboxInput || isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport getFieldValueByName from './logic/getFieldArrayValueByName';\nimport { appendId, mapIds } from './logic/mapIds';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport isKey from './utils/isKey';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid,\n    renderWatchedInputs,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...get(\n      fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\n        ? fieldArrayDefaultValues.current\n        : defaultValuesRef.current,\n      name,\n      [],\n    ),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setField] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const [isDeleted, setIsDeleted] = React.useState(false);\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const isNameKey = isKey(name);\n\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues,\n      });\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender: boolean) => {\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | null)[],\n  ) => {\n    if (readFormStateRef.current.isDirty) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        getIsFieldsDifferent(\n          flagOrFields,\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (readFormStateRef.current.dirtyFields) {\n      dirtyFieldsRef.current[name] = [\n        ...(dirtyFieldsRef.current[name] || fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ];\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    resetFields();\n    setFieldAndValidState(\n      prependAt(\n        allFields.current,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n\n    if (isArray(errorsRef.current[name])) {\n      errorsRef.current[name] = prependAt(errorsRef.current[name], emptyArray);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(\n        touchedFieldsRef.current[name],\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = prependAt(\n        dirtyFieldsRef.current[name],\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    resetFields(\n      removeArrayAt(getFieldValueByName(fieldsRef.current, name), index),\n    );\n    setFieldAndValidState(removeArrayAt(allFields.current, index));\n    setIsDeleted(true);\n\n    if (isArray(errorsRef.current[name])) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n      if (!unique(errorsRef.current[name]).length) {\n        delete errorsRef.current[name];\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(\n        touchedFieldsRef.current[name],\n        index,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = removeArrayAt(\n        dirtyFieldsRef.current[name],\n        index,\n      );\n\n      if (!dirtyFieldsRef.current[name].length) {\n        delete dirtyFieldsRef.current[name];\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n\n    resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(\n      insertAt(\n        allFields.current,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n\n    if (isArray(errorsRef.current[name])) {\n      errorsRef.current[name] = insertAt(\n        errorsRef.current[name],\n        index,\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(\n        touchedFieldsRef.current[name],\n        index,\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = insertAt(\n        dirtyFieldsRef.current[name],\n        index,\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(allFields.current, indexA, indexB);\n    setFieldAndValidState([...allFields.current]);\n\n    if (isArray(errorsRef.current[name])) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      swapArrayAt(dirtyFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(allFields.current, from, to);\n    setFieldAndValidState([...allFields.current]);\n\n    if (isArray(errorsRef.current[name])) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      moveArrayAt(dirtyFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (\n      isNameKey &&\n      isDeleted &&\n      fieldArrayDefaultValues.current[name] &&\n      fields.length < fieldArrayDefaultValues.current[name].length\n    ) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n\n    if (isWatchAllRef && isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          break;\n        }\n      }\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    isDeleted,\n    isNameKey,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport getFieldArrayValueByName from './logic/getFieldArrayValueByName';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const { isOnBlur, isOnSubmit, isOnChange, isOnAll } = React.useRef(\n    modeChecker(mode),\n  ).current;\n  const validateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const isWindowUndefined = typeof window === UNDEFINED;\n  const isWeb =\n    typeof document !== UNDEFINED &&\n    !isWindowUndefined &&\n    !isUndefined(window.HTMLElement);\n  const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnSubmit: isReValidateOnSubmit,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [reRender, resolverRef],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref)) {\n        if (isString(value)) {\n          ref.value = value;\n        } else {\n          ref.files = value as FileList;\n        }\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = (value as string).includes(\n                  checkboxRef.value,\n                )),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [isWeb],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef.current, name);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          getIsFieldsDifferent(\n            getFieldArrayValueByName(\n              fieldsRef.current,\n              getFieldArrayParentName(name),\n            ),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          validateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, validateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldArrayValueByName(fieldsRef.current),\n        contextRef.current,\n        validateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        payload.forEach((name) => {\n          const error = get(errors, name);\n\n          if (error) {\n            set(errorsRef.current, name, error);\n          } else {\n            unset(errorsRef.current, name);\n          }\n        });\n        reRender();\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n      }\n\n      return isEmptyObject(errorsRef.current);\n    },\n    [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, resolverRef],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [\n      executeSchemaOrResolverValidation,\n      executeValidation,\n      reRender,\n      resolverRef,\n    ],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      config: SetValueConfig,\n      parentFieldName?: string,\n    ) => {\n      for (const key in value) {\n        const fieldName = `${parentFieldName || name}${\n          isArray(value) ? `[${key}]` : `.${key}`\n        }`;\n        const field = fieldsRef.current[fieldName];\n\n        if (isObject(value[key])) {\n          setInternalValues(name, value[key], config, fieldName);\n        }\n\n        if (field) {\n          setFieldValue(field, value[key]);\n\n          if (config.shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (config.shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      }\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          watchFieldsHookRef.current[key].has(name) ||\n          !watchFieldsHookRef.current[key].size ||\n          isNameInFieldArray(fieldArrayNamesRef.current, name)\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      !isPrimitive(value) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = target ? (target as Ref).name : '';\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (!field) {\n          return;\n        }\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const shouldSkipValidation =\n          !isOnAll &&\n          skipValidation({\n            hasError: !!get(errorsRef.current, name),\n            isOnChange,\n            isBlurEvent,\n            isOnSubmit,\n            isReValidateOnSubmit,\n            isOnBlur,\n            isReValidateOnBlur,\n            isSubmitted: isSubmittedRef.current,\n          });\n        let shouldRender = setDirty(name) || isFieldWatched(name);\n\n        if (\n          isBlurEvent &&\n          !get(touchedFieldsRef.current, name) &&\n          readFormStateRef.current.touched\n        ) {\n          set(touchedFieldsRef.current, name, true);\n          shouldRender = true;\n        }\n\n        if (shouldSkipValidation) {\n          renderWatchedInputs(name);\n          return shouldRender && reRender();\n        }\n\n        if (resolver) {\n          const { errors } = await resolver(\n            getFieldArrayValueByName(fieldsRef.current),\n            contextRef.current,\n            validateAllFieldCriteria,\n          );\n          const previousFormIsValid = isValidRef.current;\n          isValidRef.current = isEmptyObject(errors);\n\n          error = (get(errors, name)\n            ? { [name]: get(errors, name) }\n            : {}) as FlatFieldErrors<TFieldValues>;\n\n          if (previousFormIsValid !== isValidRef.current) {\n            shouldRender = true;\n          }\n        } else {\n          error = await validateField<TFieldValues>(\n            fieldsRef,\n            validateAllFieldCriteria,\n            field,\n          );\n        }\n\n        renderWatchedInputs(name);\n\n        if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n          reRender();\n        }\n      };\n\n  const validateResolver = React.useCallback(\n    (values: any = {}) => {\n      const fieldValues = isEmptyObject(defaultValuesRef.current)\n        ? getFieldsValues(fieldsRef.current)\n        : defaultValuesRef.current;\n\n      resolverRef.current!(\n        transformToNestObject({\n          ...fieldValues,\n          ...values,\n        }),\n        contextRef.current,\n        validateAllFieldCriteria,\n      ).then(({ errors }) => {\n        const previousFormIsValid = isValidRef.current;\n        isValidRef.current = isEmptyObject(errors);\n\n        if (previousFormIsValid !== isValidRef.current) {\n          reRender();\n        }\n      });\n    },\n    [reRender, validateAllFieldCriteria, resolverRef],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef.current,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n    },\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n          [\n            fieldsWithValidationRef,\n            validFieldsRef,\n            watchFieldsRef,\n          ].forEach((data) => data.current.delete(field.ref.name));\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched\n          ) {\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [reRender, validateResolver, removeFieldEventListener, resolverRef],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef.current,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldsRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      unmountFieldsStateRef.current[name],\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = isEmptyUnmountFields\n        ? get(defaultValuesRef.current, name)\n        : unmountFieldsStateRef.current[name];\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, field).then(\n          (error) => {\n            const previousFormIsValid = isValidRef.current;\n\n            isEmptyObject(error)\n              ? validFieldsRef.current.add(name)\n              : (isValidRef.current = false);\n\n            if (previousFormIsValid !== isValidRef.current) {\n              reRender();\n            }\n          },\n        );\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? getFieldValue(fields, name)\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners({\n        field:\n          isRadioOrCheckbox && field.options\n            ? field.options[field.options.length - 1]\n            : field,\n        isRadioOrCheckbox:\n          isRadioOrCheckbox || isSelectInput(ref as FieldElement),\n        handleChange: handleChangeRef.current,\n      });\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldsRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldsRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldsRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = {\n        ...unmountFieldsStateRef.current,\n        ...getFieldsValues(fieldsRef.current),\n      };\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            transformToNestObject(fieldValues),\n            contextRef.current,\n            validateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                validateAllFieldCriteria,\n                field,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(transformToNestObject(fieldValues), e);\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError && isWeb) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [isWeb, reRender, resolverRef, shouldFocusError, validateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    fieldsRef.current = {};\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    unmountFieldsStateRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  const getValue = <TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue => getFieldValue(fieldsRef.current, name);\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    const fields = fieldsRef.current;\n\n    if (isString(payload)) {\n      return getValue(payload);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getValue(name),\n        }),\n        {},\n      );\n    }\n\n    return transformToNestObject(getFieldsValues(fields));\n  }\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    mode: {\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref, MutationWatcher } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: VoidFunction,\n): MutationWatcher {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners({\n  field: { ref },\n  handleChange,\n  isRadioOrCheckbox,\n}: {\n  field: Field;\n  isRadioOrCheckbox: boolean;\n  handleChange?: EventListenerOrEventListenerObject;\n}): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\n  control?: Control;\n}): UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n  const nameRef = React.useRef(name);\n\n  const updateWatchValue = React.useCallback(\n    () =>\n      setValue(\n        watchInternal(nameRef.current, defaultValueRef.current, idRef.current),\n      ),\n    [setValue, watchInternal, defaultValueRef, nameRef, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(nameRef.current, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    nameRef,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","[object Object]","val","undefined","filter","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","defaultResult","validResult","values","map","attributes","isEmptyString","getFieldValue","fields","name","field","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","_","i","baseGet","slice","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isSameRef","fieldValue","search","output","isString","startsWith","find","error","types","message","objectA","objectB","objectAKeys","every","compareObject","RegExp","validationData","isValueMessage","isRegex","isValidElement","getValidateError","isMessage","isBoolean","validateAllFieldCriteria","errors","async","fieldsRef","required","maxLength","minLength","min","max","pattern","validate","current","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","getValueAndMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","getPath","getInnerPath","pathWithIndex","isPrimitive","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","transformToNestObject","parentPath","flat","Infinity","forEach","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","substring","indexOf","results","getFieldsValues","getIsFieldsDifferent","referenceArray","differenceArray","dataA","dataB","isMatchFieldArrayName","searchName","names","some","mode","isOnAll","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","appendId","keyName","generateId","mapIds","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","filterBooleanArray","_a","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","errorsRef","trigger","reValidateMode","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","unmountFieldsStateRef","formState","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","isCheckboxInput","onFocusRef","commonTask","event","target","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","touched","onChange","shouldValidate","skipValidation","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateSchemaIsValid","renderWatchedInputs","shouldRender","getDefaultValues","getFieldArrayParentName","memoizedDefaultValues","setField","isDeleted","setIsDeleted","allFields","isNameKey","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","reset","pop","watchField","resetFunctions","fieldArrayNames","delete","swap","getFieldValueByName","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","currentFieldName","previousFieldName","has","insertAt","resolver","context","defaultValues","shouldFocusError","shouldUnregister","criteriaMode","Set","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeChecker","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","submitCount","isSubmitting","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","getFieldArrayValueByName","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","Promise","all","setInternalValues","config","parentFieldName","setInternalValue","isFieldWatched","found","size","shouldSkipValidation","validateResolver","then","forceDelete","handleChange","mutationWatcher","fieldRef","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldsRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","onDomRemove","isEmptyUnmountFields","addEventListener","attachEventListeners","handleSubmit","callback","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","getValue","commonProps","getValues","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","nameRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}